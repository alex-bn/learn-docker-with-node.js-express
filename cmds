docker image ls

docker build .

docker build -t node-app-image .

docker run -d --name node-app node-app-image

docker ps

docker rm node-app -f

docker run -p 3000:3000 -d --name node-app node-app-image

docker exec -it node-app bash

PS:		docker run -v ${pwd}:/app -p 3000:3000 -d -name node-app node-app-image
cmd:	docker run -v %cd%:/app -p 3000:3000 -d -name node-app node-app-image
linux:	docker run -v $(pwd):/app -p 3000:3000 -d -name node-app node-app-image

docker ps -a

docker logs node-app

docker run -v ${pwd}:/app:ro -v /app/node_modules -p 3000:3000 -d --name node-app node-app-image
docker run -v ${pwd}:/app:ro -v /app/node_modules -p 3000:3000 -d --name node-app node-app-image

docker run -v ${pwd}:/app:ro -v /app/node_modules --env PORT=4000 -p 3000:4000 -d --name node-app node-app-image
docker run -v ${pwd}:/app:ro -v /app/node_modules --env-file ./.env -p 3000:3000 -d --name node-app node-app-image

docker volume ls

remove unnecessary volumes	-> docker volume prune

delete volume associated with container		-> docker rm node-app -fv

docker-compose up 
// detached
docker-compose up -d

docker-compose down

delete unecessary volumes that it creates -->	docker-compose down -v
force a brand new build 	->  docker-compose up -d --build


docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d
docker-compose -f docker-compose.yml -f docker-compose.dev.yml down -v
docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d --build

docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
docker-compose -f docker-compose.yml -f docker-compose.prod.yml down -v
docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d --build

docker exec -it node-docker-mongo-1 mongo -u "lisi" -p "mypasswd"

-v flag --> will also delete mongo-db volume, not just the anonymous volumes
, so after setting the volume for the mongodb use:
docker-compose -f docker-compose.yml -f docker-compose.prod.yml down

---
docker volume ls
--start your app--
docker volume prune		--> will delete unused volumes
---
docker ps
docker inspect container-name
---
docker network ls
---
dns is built into docker so whenever you need a service to communicate with another service you can use the service name which is equivalent with its ip address
----

docker network inspect network-name

----

to test the connecttodb function:
docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d --no-deps node-app

---
logs -->  docker logs node-docker-node-app-1 -f
---

docker exec -it node-docker-redis-1 redis-cli

docker exec -it node-docker-mongo-1 redis-cli

----
// scale
docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d --scale node-app=2

----
install on ubuntu vm
https://get.docker.com/